First-Class Functions
    Task: Write a function applyTwice that takes another function and a value, 
    and applies the function to the value twice. 
    For example, applyTwice (fun x -> x * 2) 3 should return 12.
    
    Relevance: This task demonstrates how functions can be treated as values and passed as arguments.
    
Higher-Order Functions
    Task: Create a function filterMap that combines filtering and mapping into one operation. 
    It should take a predicate function, a transformation function, and a list, 
    and return a new list of transformed elements that satisfy the predicate.
    
    Relevance: This highlights how functions can be used as arguments 
    and combined to create more abstract operations.
    
Type Inference and Polymorphism
    Task: Implement a function findFirst that takes a predicate and a list, 
    and returns the first element satisfying the predicate. 
    The function should be generic, working with any type.
    
    Relevance: This task showcases F#â€™s ability to infer types and write polymorphic functions.
    
Recursion and Tail Recursion
    Task: Write a function sumList to calculate the sum of elements in a 
    list using both regular recursion and tail recursion. 
    Compare their performance for large lists.
    
    Relevance: This demonstrates the concept of recursion 
    and the importance of optimizing it with tail recursion to avoid stack overflow.
    
Algebraic Data Types
    Task: Define a discriminated union Shape with cases Circle (radius) and Rectangle (width and height). 
    Implement a function area that computes the area of any shape.
    
    Relevance: This task demonstrates the power of algebraic data types for modeling diverse but related data.

Strict and Lazy Evaluation
    Task: Create a function lazyFibonacci that generates an infinite 
    sequence of Fibonacci numbers. Use both strict and lazy evaluation to demonstrate their differences.
    
    Relevance: This task contrasts the evaluation strategies in F#.