squareList = Basics of Functional Programming
    Task: Write a function squareList that takes a list of integers 
    and returns a new list where each element is squared.

factorial = Recursion, a method calling itself
    Task: Create a recursive function factorial to calculate the factorial of a given integer.

filterEven = Higher-Order Functions
    A Higher-Order Function (HOF) is a function that either:
        1. Takes one or more functions as arguments, or
        2. Returns a function as its result, or
        3. Does both.
    Task: Write a function filterEven that filters out odd numbers from a list using a higher-order function
    
classifyNumber = Pattern Matching
    Task: Implement a function classifyNumber that categorizes integers 
    into "Positive", "Negative", or "Zero" using pattern matching.
    
Pipelines and Composition
    Task: Combine a series of functions (e.g., double, increment, square) 
    into a single pipeline using the |> operator to transform a list of integers.
    
sumAndProduct = Working with Tuples
    Task: Write a function sumAndProduct that takes two integers 
    and returns a tuple containing their sum and product.
    
shape = Custom Types and Discriminated Unions
    Task: Define a discriminated union Shape with types Circle (radius) 
    and Rectangle (width, height). Write a function area that calculates the area of a given shape.